#-a method sees what is left of the dot.

def() is like putting it in your head and using it later within code
- you have to call it later so that it works "taking it from the past and using it"

PARAMETERS

def hello(first,last):
    print(f'hello {first} {last}!')
ex:2
first = 'bob'
last = 'jones'
hello(first,last)


ex:1
hello('merritt', 'lawrensen')

varible lookups can go out but cant go inside the function 
if you have a, b, c, d in your function
and print abcd

but you have 

thing 
thing
thing
thing
print thing thing thing d

it will read left to right and if you dont put that last thing you will just print d

if arguments are optional and only optional you can enter them 

hello(thing1, c= 'mystuf')

keyword argumets dont look it up by definition

*args is defined as a tuple of the poitoinal arguments and passedto the fnction that dont have explicit names in our functon 
**kwargs is defined as a dictionary of any keyword arguments passed to the function that donâ€™t match keywords in the function signature. You can find more information about both here.

the star is only used to MAKE a function

*args go first the the **kwargs

RETURNING
a return is like a break but no return value

you dont need a else becasue a return is just going to end it 

def add(a, b):
    return a+b (use this becasue you may             want to print it or                  change it out later but              you cant if you just use             it as a print statemnt )

print(add(2,3) + 1)

is 6 

this is a pure transformation 

x= add(2,3) this can now be stored.

use the return insted 

in adtion you can use:

def my_print(a,b):
    print(f'the answer is {add(a,b)}')
            
___________________________________________________________

def noisy_add(num1,num2):
    print(f"ADDING {num1} AND {num2}!!!:d")
    return num1 +num2 # it is bad if you dont return anything you need to have a return to see                      what is left behing 

# the plus is a function within the parinthatese
noisy_add(3+1) + (-2+4)  # addint 3 and 1
noisy_add(4) + (2)      # adding 4 and 2
#equals 6


print('a', 'b', 'c')

# this is the same with a *args

def m_print(*args, end= '\n', sep=' '):
    for arg in args:
        print(arg + sep, end='', sep='')
    print(end, sep='', end='')


print(end=*1*100) # this gives you 100 stars after your statment 

___________________________________________________________


cvc_finder.py

import string
input_string = 'abcadeemonqrs'
vowel_string = 'aoeuiy'
consonant_string = ''
for letter in string.ascii_lowercase:
    if letter not in vowel_string:
        consonant_string += letter 

for index in range(len(input_string)):
    if input_string[index] in vowel_string and input_string[index - 1 in consonant_string and input_string += 1]
        print(index, input_string[index-1:index+2])


--------------------

file input output

two ways to get to paths are relative and absolute

-relative path is relative to the file found in 
file.text or ./file.text represents a file in current direcory

-absolute paths are specific path that respect the root of the file system

c:/user/bob/desktop.txt



to get a file you need to do print(f.rea())

THIS IS HOW IT IS DONE REAL WORLD
with open('test.txt') as f:
    print(f)
    print(dir(f))
    print(f.read())


IF YOU WANT TO READ IT 
with open('test.txt', 'r') as f:
    text = f.read()

text_lines = text.split('\n')
print(text_lines)

print(text_lines)
text_lines = [line + 'SPOOKY' for line in text_lines]

print(text_lines)

new_text = '\n'.join(text_lines)

print(new_text)

---------------

list_of_lists = [[1,2,3]],
                [[1,2,3]],
                [[1,2,3]]

def double_nums (in_list_of_lists):
    for i in range(len(in_list_of_lists)):
        for j in range(len(in_list_of_lists[i])):
            doubled_num = in_list_of_lists[i][j]*2
            in_list_of_lists[i][j] = double_num
    return in_list_of_lists
print(doubled_num(list_of_lists))


words = {
'let': 1,
'the' : 1,



}

let the user enter a word, then show the words which most frequently follow it.

-------------------------------------

- A module is a .py file plain and simple
- If you try to get the name of the module exactly then you are going to get _main_
- If you want to run a module indiviualy you can run python -m what ever you are trying to run 

- A package

--------------------------------------

- Classes:

- represent types (int, float, str, list, etc.....)

EXAMPLE*

class Point:
    def __init__(self, x, y): # this is the initializer
        self.x = x #these are member variables
        self.y = y

p = Point(5,2) # call the initializer, instantiate the class
print(p.x) # 5
print(p.y) # 2
print(type(p)) #Point

-the thing to the left of the dot is what is going to be operated on 

-with the @staticmethond , you need to have a (r,theta): in order to make it works this makes it not belong to the object but it belongs to the class

- the class is a blueprint for the for the object 

dunder methods;

__x__ example 

dunder is also named the magic method

-------------------------------------
EXAMPLE:

from random import randint 

class WackyNum:

    eating_incident = {6,7,8,9}

    @staticmethond
    def eating_check(a,b): #static does not want to think about self ever 
        if a in WackyNum.eating_incident and b in WackyNum.eating_incident:
            print('awkward becasue of the eating incident')


    def __init__(self, num= 0):
        self.num = num

    def __repr__(self):
        return f'I am aprox {self.num + randint (-2,2)}'

    def__add__(self,in_num)
        print(':D nice!')
        WackyNum.eating_check(self.num, in_num)
        if type(in_num) is int:
            return WackyNum(self.num + in_num)
        raise MemoryError(f'I dont't rementer asking for a {type(in_num)})

if __name__ == '__main__':
    my_num = WackyNum(8)
    print(my_num)
    my_num = my_num + 100
    print (my_num)
    my_num = my_num + 'a'
   

   --------------------------------

MULTIPLE INHERITANCE:

  - a subclass inharets from a super class
  -Method resilution ordrer
    